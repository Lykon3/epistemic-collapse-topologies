import React, { useState, useEffect, useRef } from 'react';
import { LineChart, Line, AreaChart, Area, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';
import { Zap, Activity, AlertTriangle, GitBranch, Waves, Target, Brain, Cpu, Play, Pause, RotateCcw, ShieldCheck, Link2 } from 'lucide-react';
import * as d3 from 'd3';

const ShockwaveEngineV2 = () => {
 // --- STATE MANAGEMENT ---
 const [activeTab, setActiveTab] = useState('pulse');
 const [selectedEvent, setSelectedEvent] = useState('nuclear_incident');
 const [isSimulating, setIsSimulating] = useState(false);
 const [currentPhase, setCurrentPhase] = useState(0);
 const [simulationData, setSimulationData] = useState([]);
 const [topologyData, setTopologyData] = useState({ nodes: [], links: [] });
 const [systemState, setSystemState] = useState({}); // For tracking velocity and coupling
 const svgRef = useRef(null);
 const simulationIntervalRef = useRef(null);
 const MAX_PHASES = 60;

 // --- EVENT & PHYSICS TEMPLATES ---
 const eventTemplates = {
   'nuclear_incident': {
     name: 'Nuclear Facility Anomaly',
     description: 'Unexplained radiation spike near military installation',
     initialKRI: { semantic: 0.95, sentiment: -0.92, archetype: 0.88, temporal: 0.85 },
     blocResponses: {
       MAGA: { delay: 1, amp: 1.1, frame: 'Foreign Sabotage', freq: 0.7, keywords: ['sabotage', 'attack'] },
       Kremlin: { delay: 0, amp: 1.6, frame: 'NATO Provocation', freq: 0.6, keywords: ['provocation', 'nato', 'attack'] },
       Liberal: { delay: 2, amp: 0.8, frame: 'Safety Protocols', freq: 0.8, keywords: ['safety', 'investigation'] },
       Western: { delay: 1, amp: 0.9, frame: 'Technical Malfunction', freq: 0.75, keywords: ['technical', 'investigation'] },
       Neutral: { delay: 3, amp: 0.5, frame: 'Investigation Ongoing', freq: 0.5, keywords: ['investigation'] }
     }
   },
   'financial_collapse': {
       name: 'Major Bank Collapse',
       description: 'Systemic financial institution fails overnight',
       initialKRI: { semantic: 0.86, sentiment: -0.88, archetype: 0.79, temporal: 0.94 },
       blocResponses: {
           MAGA: { delay: 0, amp: 1.5, frame: 'Globalist System Crumbling', freq: 0.6, keywords: ['globalist', 'elite', 'collapse'] },
           Kremlin: { delay: 1, amp: 1.3, frame: 'Dollar Hegemony Ending', freq: 0.5, keywords: ['dollar', 'hegemony', 'collapse'] },
           Liberal: { delay: 0, amp: 1.1, frame: 'Regulation Failure', freq: 0.7, keywords: ['regulation', 'failure'] },
           Western: { delay: 1, amp: 0.8, frame: 'Contained Risk', freq: 0.65, keywords: ['contained', 'risk'] },
           Neutral: { delay: 2, amp: 0.6, frame: 'Market Analysis', freq: 0.55, keywords: ['market', 'analysis'] }
       }
   },
   // Add other events here
 };
 
 // --- NEW: Physics V2 - Chaos Modules ---
 const frameCouplingMatrix = {
   'attack': { 'provocation': 0.1, 'sabotage': 0.15 },
   'sabotage': { 'attack': 0.15 },
   'collapse': { 'globalist': 0.2, 'hegemony': 0.18 },
   'globalist': { 'collapse': 0.2 },
 };
 const CREDIBILITY_DECAY_THRESHOLD = 0.3; // Velocity threshold to trigger decay
 const CREDIBILITY_DAMPING_FACTOR = 0.92; // How much to dampen by

 const COLORS = { MAGA: '#DC2626', Kremlin: '#7C2D12', Liberal: '#2563EB', Western: '#059669', Neutral: '#6B7280' };

 // --- SIMULATION LOGIC ---
 const runSimulation = () => {
   const event = eventTemplates[selectedEvent];
   if (!event) return;

   let phase = 0;
   let localSystemState = {};
   Object.keys(event.blocResponses).forEach(bloc => {
     localSystemState[bloc] = { velocity: 0, lastAmplitude: 0, couplingActive: false, credibilityDecayActive: false };
   });

   if (simulationIntervalRef.current) clearInterval(simulationIntervalRef.current);

   simulationIntervalRef.current = setInterval(() => {
     if (phase >= MAX_PHASES) {
       clearInterval(simulationIntervalRef.current);
       setIsSimulating(false);
       return;
     }

     const phaseData = { phase };
     const currentNodes = [];
     const blocAmplitudes = {};

     // Calculate base amplitudes
     Object.entries(event.blocResponses).forEach(([bloc, params]) => {
         const { delay, amp, freq } = params;
         const effectivePhase = phase - delay;
         let amplitude = 0;
         if (effectivePhase >= 0) {
             const decay = Math.exp(-0.08 * effectivePhase);
             const oscillation = Math.sin(freq * effectivePhase);
             const noise = (Math.random() - 0.5) * 0.05;
             amplitude = amp * decay * Math.abs(oscillation) + noise;
         }
         blocAmplitudes[bloc] = Math.max(0, amplitude);
     });

     // V2 PHYSICS: Apply coupling and credibility decay
     Object.entries(event.blocResponses).forEach(([bloc, params]) => {
         let finalAmplitude = blocAmplitudes[bloc];
         let couplingActive = false;

         // 1. Nonlinear Frame Coupling
         let couplingBonus = 0;
         params.keywords.forEach(keyword => {
             if (frameCouplingMatrix[keyword]) {
                 Object.entries(event.blocResponses).forEach(([otherBloc, otherParams]) => {
                     if (bloc === otherBloc) return;
                     otherParams.keywords.forEach(otherKeyword => {
                         if (frameCouplingMatrix[keyword][otherKeyword]) {
                             couplingBonus += frameCouplingMatrix[keyword][otherKeyword] * blocAmplitudes[otherBloc];
                             couplingActive = true;
                         }
                     });
                 });
             }
         });
         finalAmplitude += couplingBonus;
         localSystemState[bloc].couplingActive = couplingActive;
         
         // 2. Observer Interference Layer (Credibility Decay)
         const velocity = finalAmplitude - localSystemState[bloc].lastAmplitude;
         localSystemState[bloc].velocity = velocity;
         localSystemState[bloc].credibilityDecayActive = false;
         if (velocity > CREDIBILITY_DECAY_THRESHOLD) {
             finalAmplitude *= CREDIBILITY_DAMPING_FACTOR;
             localSystemState[bloc].credibilityDecayActive = true;
         }
         
         localSystemState[bloc].lastAmplitude = finalAmplitude;
         phaseData[bloc] = Math.max(0, finalAmplitude);
         currentNodes.push({ id: bloc, amplitude: phaseData[bloc], ...localSystemState[bloc] });
     });

     setSimulationData(prev => [...prev.slice(-MAX_PHASES), phaseData]);
     setTopologyData({ nodes: currentNodes, links: [] }); // Links can be added later
     setSystemState({...localSystemState});
     setCurrentPhase(phase);
     phase++;
   }, 250);
 };
 
 const handleStartStop = () => {
   if (isSimulating) {
     clearInterval(simulationIntervalRef.current);
     setIsSimulating(false);
   } else {
     handleReset();
     setIsSimulating(true);
     runSimulation();
   }
 };

 const handleReset = () => {
   clearInterval(simulationIntervalRef.current);
   setIsSimulating(false);
   setCurrentPhase(0);
   setSimulationData([]);
   setTopologyData({ nodes: [], links: [] });
   setSystemState({});
 };
 
 useEffect(() => {
   handleReset();
 }, [selectedEvent]);

 // --- VISUALIZATION & UI COMPONENTS ---
 const PulseChart = () => (
   <ResponsiveContainer width="100%" height={300}>
     <AreaChart data={simulationData}>
       <CartesianGrid strokeDasharray="3 3" stroke="#475569"/>
       <XAxis dataKey="phase" label={{ value: 'Simulation Phase (T)', position: 'insideBottom', offset: -5 }} stroke="#94a3b8"/>
       <YAxis label={{ value: 'KRI Amplitude', angle: -90, position: 'insideLeft' }} stroke="#94a3b8" domain={[0, 'dataMax + 0.2']}/>
       <Tooltip contentStyle={{ backgroundColor: 'rgba(30, 41, 59, 0.9)', border: 'none', color: '#cbd5e1' }}/>
       <Legend />
       {Object.keys(eventTemplates[selectedEvent]?.blocResponses || {}).map(bloc => (
         <Area key={bloc} type="monotone" dataKey={bloc} stroke={COLORS[bloc]} fill={COLORS[bloc]} fillOpacity={0.3} strokeWidth={2}/>
       ))}
     </AreaChart>
   </ResponsiveContainer>
 );

 const NarrativeTopology = () => {
     useEffect(() => {
       if (!svgRef.current || topologyData.nodes.length === 0) {
           d3.select(svgRef.current).selectAll("*").remove();
           return;
       };

       const width = svgRef.current.clientWidth;
       const height = svgRef.current.clientHeight;
       const svg = d3.select(svgRef.current);

       const simulation = d3.forceSimulation(topologyData.nodes)
           .force("charge", d3.forceManyBody().strength(-150))
           .force("center", d3.forceCenter(width / 2, height / 2))
           .force("x", d3.forceX(width/2).strength(0.05))
           .force("y", d3.forceY(height/2).strength(0.05));

       const node = svg.selectAll("g")
           .data(topologyData.nodes, d => d.id)
           .join(
               enter => {
                   const g = enter.append("g");
                   g.append("circle").attr("r", 0).style("stroke-width", 2);
                   g.append("text").text(d => d.id).attr("y", 4).style("fill", "white").style("font-size", "10px").style("text-anchor", "middle");
                   return g;
               }
           );

       node.select("circle")
           .transition().duration(200)
           .attr("r", d => 15 + d.amplitude * 40)
           .style("fill", d => COLORS[d.id])
           .style("stroke", d => {
               if (d.couplingActive) return "#34D399"; // Green for coupling
               if (d.credibilityDecayActive) return "#FBBF24"; // Amber for decay
               return "#fff";
           });

       simulation.on("tick", () => {
           node.attr("transform", d => `translate(${d.x}, ${d.y})`);
       });

     }, [topologyData]);

     return <div className="w-full h-[400px] bg-slate-800 rounded-lg"><svg ref={svgRef} className="w-full h-full"></svg></div>;
 };
 
 // --- MAIN RENDER ---
 return (
   <div className="min-h-screen bg-gray-900 text-white p-4 font-sans">
     <div className="max-w-7xl mx-auto">
       <header className="mb-6">
         <h1 className="text-3xl font-bold text-purple-400 flex items-center"><Waves className="mr-3"/>Shockwave Engine V2</h1>
         <p className="text-gray-400 mt-1">Modeling narrative coupling, resonance, and credibility decay.</p>
       </header>

       <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
         <div className="lg:col-span-1 bg-slate-800 p-4 rounded-lg shadow-lg">
            <h2 className="text-xl font-semibold mb-4 border-b border-slate-700 pb-2">Simulation Control</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">Select Shock Event</label>
                <select value={selectedEvent} onChange={e => setSelectedEvent(e.target.value)} className="w-full p-2 bg-slate-700 border border-slate-600 rounded-md">
                  {Object.entries(eventTemplates).map(([key, event]) => (
                    <option key={key} value={key}>{event.name}</option>
                  ))}
                </select>
              </div>
              <div className="flex space-x-2">
                <button onClick={handleStartStop} className={`w-full flex items-center justify-center p-2 rounded-md text-white font-semibold ${isSimulating ? 'bg-yellow-500 hover:bg-yellow-600' : 'bg-green-500 hover:bg-green-600'}`}>
                  {isSimulating ? <Pause size={16} className="mr-2"/> : <Play size={16} className="mr-2"/>}
                  {isSimulating ? 'Pause' : 'Start'}
                </button>
                <button onClick={handleReset} className="w-full flex items-center justify-center p-2 bg-red-500 hover:bg-red-600 rounded-md text-white font-semibold">
                  <RotateCcw size={16} className="mr-2"/>Reset
                </button>
              </div>
              {isSimulating && <div className="text-center text-purple-400 animate-pulse">Simulating Phase: {currentPhase} / {MAX_PHASES}</div>}
            </div>
            <div className="mt-4 space-y-2 text-xs border-t border-slate-700 pt-4">
               <div className="flex items-center"><Link2 size={12} className="mr-2 text-green-400"/><span>Coupling Active</span></div>
               <div className="flex items-center"><ShieldCheck size={12} className="mr-2 text-amber-400"/><span>Credibility Decay Active</span></div>
            </div>
         </div>

         <div className="lg:col-span-2 bg-slate-800 p-4 rounded-lg shadow-lg">
            <div className="border-b border-slate-700 mb-4">
               <nav className="flex space-x-4">
                   <button onClick={() => setActiveTab('pulse')} className={`flex items-center space-x-2 py-2 px-3 rounded-t-md text-sm font-medium ${activeTab === 'pulse' ? 'bg-slate-700 text-purple-400' : 'text-gray-400 hover:bg-slate-700/50'}`}><Activity size={16}/><span>Resonance Pulse</span></button>
                   <button onClick={() => setActiveTab('topology')} className={`flex items-center space-x-2 py-2 px-3 rounded-t-md text-sm font-medium ${activeTab === 'topology' ? 'bg-slate-700 text-purple-400' : 'text-gray-400 hover:bg-slate-700/50'}`}><GitBranch size={16}/><span>Narrative Topology</span></button>
               </nav>
           </div>
           {activeTab === 'pulse' && <PulseChart />}
           {activeTab === 'topology' && <NarrativeTopology />}
         </div>
       </div>
     </div>
   </div>
 );
};

export default ShockwaveEngineV2;