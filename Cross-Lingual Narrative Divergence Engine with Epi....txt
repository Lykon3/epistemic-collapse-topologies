import React, { useState, useEffect, useMemo } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ScatterChart, Scatter, AreaChart, Area, BarChart, Bar, ComposedChart, ReferenceDot } from 'recharts';
import { Brain, Shield, AlertTriangle, Zap, TrendingUp, Activity, Eye, Target, Globe, Languages, GitBranch, Compass, Layers, Network, PersonStanding, Rocket } from 'lucide-react';

// --- MAIN COMPONENT ---
const CrossLingualKompromatEngine = () => {
 // --- STATE MANAGEMENT ---
 const [activeTab, setActiveTab] = useState('overview');
 const [selectedEvent, setSelectedEvent] = useState('ukraine_conflict');
 
 // --- DATA MOCKS ---
 const geopoliticalEvents = {
   ukraine_conflict: {
     name: "Ukraine Conflict Coverage",
     narrative_divergence: [
       { date: '2022-02', t: 0, western_kri: 0.23, brics_kri: 0.67, divergence_delta: 0.44, event: 'Conflict initiation' },
       { date: '2022-04', t: 2, western_kri: 0.28, brics_kri: 0.73, divergence_delta: 0.45, event: 'Bucha reports' },
       { date: '2022-06', t: 4, western_kri: 0.31, brics_kri: 0.79, divergence_delta: 0.48, event: 'Grain corridor' },
       { date: '2022-09', t: 7, western_kri: 0.26, brics_kri: 0.84, divergence_delta: 0.58, event: 'Mobilization' },
       { date: '2023-02', t: 12, western_kri: 0.29, brics_kri: 0.81, divergence_delta: 0.52, event: 'Anniversary' },
       { date: '2023-06', t: 16, western_kri: 0.32, brics_kri: 0.86, divergence_delta: 0.54, event: 'Wagner events' },
       { date: '2024-01', t: 23, western_kri: 0.35, brics_kri: 0.88, divergence_delta: 0.53, event: 'Avdiivka' },
     ]
   },
 };
  const softSignalData = {
   culturalDrift: [
     { date: '2022-02', western_cdi: 0.3, brics_cdi: 0.6 },
     { date: '2024-01', western_cdi: 0.42, brics_cdi: 0.75 },
   ],
   influencerAffinity: [{ LNA: 0.68 }],
   crossBlocOsmosis: { brics_to_western: 0.45 }
 };
 const narrativeBifurcationPoints = [
   { event: 'Russia-Ukraine Conflict', date: '2022-02', irreversibility_score: 0.94 },
 ];

 // --- DERIVED DATA & COMPUTATION ---
 const { processedData, fracturePoints } = useMemo(() => {
   const data = geopoliticalEvents[selectedEvent].narrative_divergence;
   let processed = data.map((d, i) => ({ ...d, velocity: 0, acceleration: 0 }));

   // Calculate Velocity (change in delta / change in time)
   for (let i = 1; i < processed.length; i++) {
     const delta_divergence = processed[i].divergence_delta - processed[i-1].divergence_delta;
     const delta_t = processed[i].t - processed[i-1].t;
     processed[i].velocity = delta_t > 0 ? delta_divergence / delta_t : 0;
   }
   
   // Calculate Acceleration (change in velocity / change in time)
   for (let i = 2; i < processed.length; i++) {
     const delta_velocity = processed[i].velocity - processed[i-1].velocity;
     const delta_t = processed[i].t - processed[i-1].t;
     processed[i].acceleration = delta_t > 0 ? delta_velocity / delta_t : 0;
   }

   // Identify fracture points (high positive acceleration)
   const accelerationValues = processed.map(p => p.acceleration);
   const threshold = Math.max(...accelerationValues) * 0.8; 
   const points = processed.filter(p => p.acceleration > 0 && p.acceleration >= threshold);

   return { processedData: processed, fracturePoints: points };
 }, [selectedEvent]);

 const currentData = processedData;

 // --- UI & VISUALIZATION COMPONENTS ---
 const MetricCard = ({ title, value, subtitle, icon: Icon, color }) => (
   <div className="bg-white rounded-lg p-4 shadow-md border-l-4" style={{ borderLeftColor: color }}>
     <div className="flex items-center justify-between">
       <div>
         <h3 className="text-sm font-medium text-gray-600">{title}</h3>
         <p className="text-xl font-bold text-gray-900">{value}</p>
         {subtitle && <p className="text-xs text-gray-500 mt-1">{subtitle}</p>}
       </div>
       <Icon size={24} style={{ color }} />
     </div>
   </div>
 );

 // --- NEW: EPISTEMIC VELOCITY & FRACTURE CHART ---
 const EpistemicVelocityChart = () => (
   <div className="bg-white rounded-lg p-6 shadow-lg">
     <h3 className="text-lg font-semibold mb-1 flex items-center">
       <Rocket className="mr-2 text-red-500" />
       Epistemic Velocity & Fracture Analysis
     </h3>
     <p className="text-sm text-gray-500 mb-4">Tracking divergence acceleration to predict symbolic fracture points.</p>
     <ResponsiveContainer width="100%" height={400}>
       <ComposedChart data={currentData}>
         <CartesianGrid strokeDasharray="3 3" />
         <XAxis dataKey="date" tick={{ fontSize: 12 }} />
         <YAxis yAxisId="left" label={{ value: 'Divergence Δ', angle: -90, position: 'insideLeft' }} tick={{ fontSize: 10 }} />
         <YAxis yAxisId="right" orientation="right" label={{ value: 'Acceleration', angle: 90, position: 'insideRight' }} tick={{ fontSize: 10 }} />
         <Tooltip content={({ active, payload }) => {
           if (active && payload && payload.length) {
             const data = payload[0].payload;
             return (
               <div className="bg-gray-800 text-white p-3 border rounded-lg shadow-xl text-xs">
                 <p className="font-bold text-base">{data.event} ({data.date})</p>
                 <p className="text-blue-400">Divergence Δ: {data.divergence_delta.toFixed(3)}</p>
                 <p className="text-green-400">Velocity: {data.velocity.toFixed(3)}</p>
                 <p className="text-red-400">Acceleration: <span className="font-bold">{data.acceleration.toFixed(3)}</span></p>
               </div>
             );
           }
           return null;
         }}/>
         <Legend />
         <Bar yAxisId="right" dataKey="acceleration" barSize={20} fill="#EF4444" name="Acceleration" fillOpacity={0.6}/>
         <Line yAxisId="left" type="monotone" dataKey="divergence_delta" stroke="#3B82F6" strokeWidth={3} name="Divergence Delta" dot={false} />
         {fracturePoints.map(point => (
           <ReferenceDot
             key={point.date}
             yAxisId="left"
             x={point.date}
             y={point.divergence_delta}
             r={10}
             fill="red"
             stroke="white"
             strokeWidth={2}
           >
              <Label value="FRACTURE" position="top" fill="red" fontSize={12} fontWeight="bold" />
           </ReferenceDot>
         ))}
       </ComposedChart>
     </ResponsiveContainer>
      <div className="mt-4">
       <h4 className="font-semibold">Predicted Fracture Point(s):</h4>
       {fracturePoints.length > 0 ? (
         <ul className="list-disc list-inside text-sm text-red-700">
           {fracturePoints.map(p => <li key={p.date}>{p.event} ({p.date}) - Highest acceleration indicates a rapid, destabilizing shift in narrative frames.</li>)}
         </ul>
       ) : (
         <p className="text-sm text-gray-600">No significant fracture points detected based on current threshold.</p>
       )}
     </div>
   </div>
 );
 
 // Placeholder for other components
 const SoftInfluenceModule = () => <div className="text-center p-10 bg-white rounded-lg shadow-lg">Soft Signal Inference Layer Content...</div>;
 const BifurcationTimeline = () => <div className="text-center p-10 bg-white rounded-lg shadow-lg">Narrative Bifurcation Events...</div>;

 // --- MAIN RENDER ---
 return (
   <div className="min-h-screen bg-gray-100 p-4 font-sans">
     <div className="max-w-7xl mx-auto">
       {/* Header */}
       <div className="bg-white rounded-lg shadow-lg mb-4 p-4">
          <h1 className="text-2xl font-bold text-gray-900 flex items-center"><Globe className="mr-3 text-purple-600" />Cross-Lingual Narrative Engine</h1>
          <p className="text-gray-600 text-sm mt-1">A cognitive seismograph for the international info-sphere.</p>
         {/* Tab Navigation */}
         <div className="border-b border-gray-200 mt-4">
           <nav className="-mb-px flex space-x-4 overflow-x-auto">
             {[
               { id: 'overview', label: 'Divergence', icon: Eye },
               { id: 'velocity', label: 'Velocity & Fracture', icon: Rocket },
               { id: 'soft_influence', label: 'Soft Influence', icon: Brain },
               { id: 'bifurcation', label: 'Bifurcation', icon: GitBranch },
             ].map(({ id, label, icon: Icon }) => (
               <button key={id} onClick={() => setActiveTab(id)}
                 className={`py-2 px-2 flex items-center text-xs sm:text-sm font-medium border-b-2 ${
                   activeTab === id ? 'border-purple-500 text-purple-600' : 'border-transparent text-gray-500 hover:text-gray-700'
                 }`}>
                 <Icon size={14} className="mr-1" /> {label}
               </button>
             ))}
           </nav>
         </div>
       </div>

       {/* Tab Content */}
       {activeTab === 'overview' && (
         <div className="space-y-4">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
               <MetricCard title="Narrative Divergence Δ" value={currentData.slice(-1)[0].divergence_delta.toFixed(3)} icon={GitBranch} color="#8B5CF6"/>
               <MetricCard title="CBOI (BRICS→West)" value={softSignalData.crossBlocOsmosis.brics_to_western.toFixed(2)} icon={Layers} color="#10B981"/>
               <MetricCard title="Top LNA Score" value={softSignalData.influencerAffinity[0].LNA.toFixed(2)} icon={PersonStanding} color="#D97706"/>
               <MetricCard title="Irreversibility" value={`${(narrativeBifurcationPoints[0].irreversibility_score*100).toFixed(0)}%`} icon={AlertTriangle} color="#EF4444"/>
            </div>
            <p className="text-center p-4">Main overview charts would go here...</p>
         </div>
       )}

       {activeTab === 'velocity' && (
         <EpistemicVelocityChart />
       )}
       
       {activeTab === 'soft_influence' && (
         <SoftInfluenceModule />
       )}

       {activeTab === 'bifurcation' && (
         <BifurcationTimeline />
       )}

     </div>
   </div>
 );
};

export default CrossLingualKompromatEngine;